@page "/generator"
@rendermode InteractiveAuto
@using Microsoft.AspNetCore.Components.Web.Virtualization
@using System.Diagnostics
@using UserRegistry.Client.Models
@inject NavigationManager _navigationManager

<PageTitle>User Registry</PageTitle>

<form class="row form-inline d-flex pb-3">
    <div class="col">
        <div class="row">
            <label class="col-sm-2 col-form-label"
                   for="autoSizingSelect">Region:</label>
            <div class="col-sm-10">
                <select @bind="@locale" @bind:event="oninput"
                        @onchange="ClearPeopleStorage" class="form-select"
                        id="autoSizingSelect">
                    <option selected value="en">USA</option>
                    <option value="ge">Georgia</option>
                    <option value="ko">Korea</option>
                    <option value="de">Germany</option>
                    <option value="cz">Czech</option>
                    <option value="zh_CN">China</option>
                    <option value="el">Greek</option>
                    <option value="sk">Slovakia</option>
                    <option value="ru">Russia</option>
                    <option value="ja">Japan</option>
                </select>
            </div>
        </div>
    </div>
    <div class="col-auto d-flex align-self-center">
        <div class="row d-flex align-self-center">
            <label class="col-sm-2 col-form-label d-flex align-self-center"
                   for="autoSizingSelect1">Errors:</label>
            <span class="col d-flex align-self-center">
                <input type="range" class="form-range" id="customRange1"
                       min="0" max="10" step="0.25" @bind="errorValue"
                       @bind:event="oninput" @onchange="ClearPeopleStorage">
            </span>
            <span class="col d-flex align-self-center">
                <input type="number" class="form-control" @bind="@errorValue"
                       @bind:event="oninput" @onchange="ClearPeopleStorage"
                       min="0" max="1000" step="0.25" placeholder="Error count"
                       aria-label="Error count">
            </span>
        </div>
    </div>
    <div class="col-auto d-flex align-self-center justify-content-end">
        <div class="row d-flex align-self-center">
            <label class="col-sm-2 col-form-label" for="autoSizingSelect1">
                Seed:
            </label>
            <span class="col d-flex align-self-center">
                <input type="number" min="0" max="1999999999" class="form-control"
                    placeholder="Seed" aria-label="Seed"
                       @bind="UserSeed" @bind:event="oninput"
                       @onchange="ClearPeopleStorage">
            </span>
            <span class="col d-flex align-self-center">
                <button type="button" value="@UserSeed"
                    class="btn btn-outline-secondary"
                    @onclick="GenerateRandomSeed"
                    @onchange="ClearPeopleStorage">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16"
                    height="16" fill="currentColor" class="bi bi-shuffle"
                    viewBox="0 0 16 16">
                        <path fill-rule="evenodd" d="M0 3.5A.5.5 0 0 1 .5 3H1c2.202 0 3.827 1.24 4.874 2.418.49.552.865 1.102 1.126 1.532.26-.43.636-.98 1.126-1.532C9.173 4.24 10.798 3 13 3v1c-1.798 0-3.173 1.01-4.126 2.082A9.624 9.624 0 0 0 7.556 8a9.624 9.624 0 0 0 1.317 1.918C9.828 10.99 11.204 12 13 12v1c-2.202 0-3.827-1.24-4.874-2.418A10.595 10.595 0 0 1 7 9.05c-.26.43-.636.98-1.126 1.532C4.827 11.76 3.202 13 1 13H.5a.5.5 0 0 1 0-1H1c1.798 0 3.173-1.01 4.126-2.082A9.624 9.624 0 0 0 6.444 8a9.624 9.624 0 0 0-1.317-1.918C4.172 5.01 2.796 4 1 4H.5a.5.5 0 0 1-.5-.5" />
                        <path d="M13 5.466V1.534a.25.25 0 0 1 .41-.192l2.36 1.966c.12.1.12.284 0 .384l-2.36 1.966a.25.25 0 0 1-.41-.192zm0 9v-3.932a.25.25 0 0 1 .41-.192l2.36 1.966c.12.1.12.284 0 .384l-2.36 1.966a.25.25 0 0 1-.41-.192z" />
                    </svg>
                </button>
            </span>
        </div>
    </div>
    <div class="col-auto d-flex align-self-center justify-content-between">
        <div class="row d-flex align-self-center">
            <span class="col d-flex align-self-center">
                <button type="button" class="btn btn-secondary">Export</button>
            </span>
        </div>
    </div>
</form>

<div class="container d-flex justify-content-between">
    <table class="table table-striped">
        <thead>
            <tr>
                <th>#</th>
                <th>Guid</th>
                <th>Name</th>
                <th>Address</th>
                <th>Phone Number</th>
            </tr>
        </thead>
        <tbody>
            <Virtualize Context="p" ItemsProvider="@LoadUserData"
                SpacerElement="tr" OverscanCount="4">
                <ItemContent>
                    <tr>
                        <td>@p.Number</td>
                        <td>@p.Id</td>
                        <td>@p.Name</td>
                        <td>@p.StreetAddress</td>
                        <td>@p.Phone</td>
                    </tr>
                </ItemContent>
                <Placeholder>
                    <p>
                        Loading...;
                    </p>
                </Placeholder>
            </Virtualize>

        </tbody>
    </table>
</div>


@code {
    private string locale = "en";
    private decimal errorValue = 0;
    private int localeValue = 0;
    private int seed = 0;
    private int counter = 1;
    private DataGenerator data = new("en");
    List<PersonModel> people = new();
    private string? UserSeed { get; set; } = "0";

    private async ValueTask<ItemsProviderResult<PersonModel>> LoadUserData(
        ItemsProviderRequest request)
    {
        GetDat();
        var t = people.Skip(request.StartIndex).Take(people.Count);
        return new ItemsProviderResult<PersonModel>(t, people.Count + 20);
    }

    private IEnumerable<PersonModel> ReturnUsers(int amount)
    {
        for (int i = 0; i < amount; i++)
        {
            var user = data.GeneratePerson(seed++);
            user.Number = counter++;
            people.Add(user);
        }

        return people;
    }

    private IEnumerable<PersonModel> GetDat()
    {
        return ReturnUsers(20);
    }

    private void ClearPeopleStorage()
    {
        people.Clear();
        seed = int.Parse(UserSeed is not null ? UserSeed : "0");
        SetLocaleValue();
        seed += (int)Math.Floor((decimal)errorValue * 100) + localeValue;
        data = new(locale);
        counter = 1;
        ReturnUsers(20);
        StateHasChanged();
    }

    private void GenerateRandomSeed()
    {

        Random t = new();
        UserSeed = t.Next(1999999999).ToString();
        ClearPeopleStorage();
    }

    private void SetLocaleValue()
    {
        localeValue = 0;
        char[] f = locale.ToCharArray();
        foreach (var item in f)
        {
            localeValue += Convert.ToInt32(item);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        ClearPeopleStorage();
    }
}